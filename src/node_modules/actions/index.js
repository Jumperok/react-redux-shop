import {
    FETCH_PHONES_PENDING,
    FETCH_PHONES_FULFILLED,
    FETCH_PHONES_REJECTED,
    LOAD_MORE_PHONES_PENDING,
    LOAD_MORE_PHONES_FULFILLED,
    LOAD_MORE_PHONES_REJECTED
} from 'constants'

import { 
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi
} from 'api'

import { getRenderedPhonesLength } from 'lib'

export const fetchPhones = () => async dispatch => {
    dispatch({ type: FETCH_PHONES_PENDING })

    try {
        const phones = await fetchPhonesApi() // await before any function that returns Promise
        dispatch({
            type: FETCH_PHONES_FULFILLED,
            payload: phones
        })
    } catch (err) {
        dispatch({
            type: FETCH_PHONES_REJECTED,
            payload: err,
            error: true
        })
    }
}

export const loadMorePhones = () => async (dispatch, getState) => { //redux func take getState as 2nd param
  const offset = getRenderedPhonesLength(getState())

  dispatch({ type: LOAD_MORE_PHONES_PENDING })

  try {
      const phones = await loadMorePhonesApi({offset}) // await before any function that returns Promise
      dispatch({
          type: LOAD_MORE_PHONES_FULFILLED,
          payload: phones
      })
  } catch (err) {
      dispatch({
          type: LOAD_MORE_PHONES_REJECTED,
          payload: err,
          error: true
      })
  }
}

